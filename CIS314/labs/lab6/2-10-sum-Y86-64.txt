# Simulator: https://boginw.github.io/js-y86-64/

# Execution begins at address 0
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main       # Execute main program
halt            # Terminate program

# Array of 4 elements
.align 8
array:  .quad 0x000000000001
.quad 0x000000000002
.quad 0x000000000003
.quad 0x000000000004

main:   irmovq array, %rdi
irmovq $4, %rsi
call sum        # sum(array, 4)
ret

# start in %rdi, count in %rsi
# long sum(long *start, int count) {
#     long result = 0; // %rax
#     for (int i = count; i != 0; --i) {
#         result += *start; // start[i]
#         ++start; // %rdi += 8
#     }
#     return result;
# }
sum:    irmovq $8, %r8        # Constant 8
irmovq $1, %r9        # Constant 1
xorq %rax, %rax       # sum = 0
andq %rsi, %rsi       # Set CC
jmp     test         # Goto test
loop:   mrmovq (%rdi), %r10   # Get *start
addq %r10, %rax       # Add to sum
addq %r8, %rdi        # start++
subq %r9, %rsi        # count--.  Set CC
test:   jne    loop          # Stop when 0
ret                  # Return

# Stack starts here and grows to lower addresses
.pos 0x200
stack:
