# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program 

# Array of 10 elements to test bubble sort algorithm
    .align 8
array:  
    .quad 0x000000000005
    .quad 0x000000000002
    .quad 0x00000000000e
    .quad 0x00000000000a
    .quad 0x000000000003
    
    .quad 0x000000000004
    .quad 0x000000000007
    .quad 0x00000000000f
    .quad 0x00000000000c
    .quad 0x000000000006

main: 
    irmovq array, %rdi
    irmovq $10, %rsi
    call bubblesort         # bubblesort(array, 10)
    ret
 
# array in %rdi and len in %rsi   
# void bubblesort(int array[], int len) {    
#  int i, j;
#   for (i = 0; i < len - 1; i++){       
  
#     for (j = 0; j < len-i-1; j++){          //Last i elements are already in place           

#       if (array->dataPtr[j] > array->dataPtr[j+1]){
#         swap(&array->dataPtr[j], &array->dataPtr[j+1]);    //call swap()
    
#      }  
#     }
#   }
# }

bubblesort:
    irmovq $0, %r8                      # i=0 for the "for" loop
    irmovq $1, %rcx                     # to do i++ and j++
    irmovq $8, %rdx                     # to move array to next element (array[j+1])
    subq %rcx, %rsi                     # set len-1 for the for loops
        
    jmp test
    
    outerloop:
        irmovq $0, %r9                  # j=0 for the "for" loop
        pushq %rdi                      # push %rdi onto stack for later use
        jmp test2
        
        innerloop:
            mrmovq (%rdi), %r12         # get array[j] value
            mrmovq (%rdi), %r14         # copy for the if statment later
            addq %rdx, %rdi             # move to next element in the array (array[j+1])
            mrmovq (%rdi), %r13         # get array[j+1]
            
            subq %r13, %r14             # conditional statement for "if" statement
            jle skipswap                # don't swap if array[j] <= array[j+1]
            call swap                   # else, call swap function
            
        skipswap: 
            addq %rcx, %r9              # j++
        test2:
            irmovq $0, %r11             # copy len-1 to make conditional
            addq %rsi, %r11             # statement for inner loop
            subq %r8, %r11              # calculate len-i-1
            subq %r9, %r11              # check that j < len-i-1
            jg innerloop                # we jump if line above holds; that is (len-i-1) - j > 0

    addq %rcx, %r8                      # i++
    popq %rdi                           # pop %rdi off to reset pointer to first element in array
    
    test:
        irmovq $0, %r10                 # copy len-1 to make conditional
        addq %rsi, %r10                     # statement for outer loop
        subq %r8, %r10                  # check that i < len-1
        jg outerloop                    # we jump in line above hold; that is (len-1) - i > 0
    ret
    

# void swap(long *xp, long *yp) {
#  long t0 = *xp;
#  long t1 = *yp;
#  *xp = t1;
#  *yp = t0;
# }

swap:
    rmmovq %r12, (%rdi)             # put value array[j] into position array[j+1]
    subq %rdx, %rdi                 # move to array[j]
    rmmovq %r13, (%rdi)             # put value array[j+1] into possition array[j]
    addq %rdx, %rdi                 # move back to array[j+1] to ensure iteration to
                                        # next element in the array
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
